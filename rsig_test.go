package prekeyserver

import (
	. "gopkg.in/check.v1"
)

func (s *GenericServerSuite) Test_generateSignature_generatesACorrectSignature(c *C) {
	msg := []byte("hi")
	p1 := deriveEDDSAKeypair([symKeyLength]byte{0x0A})
	p2 := deriveEDDSAKeypair([symKeyLength]byte{0x19})
	p3 := deriveEDDSAKeypair([symKeyLength]byte{0x2A})
	wr := fixedRandBytes(
		// for t1
		[]byte{
			0x80, 0x53, 0x5e, 0xac, 0xf5, 0x28, 0x86, 0xe1,
			0xc3, 0x7b, 0x75, 0xd1, 0x47, 0xab, 0x7e, 0x2b,
			0xf3, 0x0c, 0xc6, 0x4f, 0x90, 0x2b, 0x8f, 0x47,
			0x41, 0x6d, 0xf6, 0x2a, 0x17, 0x96, 0x4e, 0xe7,
			0x80, 0x13, 0x04, 0x64, 0x7d, 0x8a, 0x18, 0x94,
			0x7d, 0xc8, 0x6b, 0x31, 0xce, 0x0f, 0x02, 0xa0,
			0x6c, 0x03, 0xbc, 0xa3, 0x33, 0xde, 0x7e, 0xc6,
			0x20,
		},
		// for t2
		[]byte{
			0xa5, 0xc8, 0x1e, 0xfc, 0xa7, 0x40, 0xa2, 0x85,
			0xca, 0x0d, 0x6f, 0xb5, 0x23, 0x01, 0x67, 0x8a,
			0x8e, 0x24, 0x54, 0xb3, 0x56, 0x02, 0xdd, 0xfe,
			0x97, 0xf4, 0xf2, 0x0b, 0x2e, 0xbd, 0x03, 0x36,
			0x56, 0xb5, 0xdb, 0xd5, 0xb0, 0x95, 0x99, 0x88,
			0x05, 0xe0, 0xd3, 0x41, 0x27, 0xfb, 0xb7, 0xdb,
			0xaf, 0xb7, 0x3a, 0xd1, 0x8b, 0x35, 0x58, 0x0b,
			0xe1,
		},
		// for t3
		[]byte{
			0xc5, 0x22, 0x19, 0x89, 0x3b, 0x85, 0xfc, 0xab,
			0x53, 0x81, 0x8c, 0xae, 0x6a, 0xb9, 0xfd, 0xaf,
			0x83, 0x5f, 0xd5, 0x53, 0xdb, 0xcf, 0xeb, 0x70,
			0xee, 0x69, 0xd5, 0x46, 0xaa, 0x05, 0xd3, 0xae,
			0xf9, 0x86, 0xb3, 0xc5, 0x7e, 0x9c, 0x27, 0x65,
			0xb0, 0x05, 0xc0, 0x40, 0x8d, 0x53, 0x38, 0x78,
			0xd9, 0x72, 0x96, 0xdd, 0x75, 0xae, 0x25, 0x9a,
			0x5a,
		},
		// for r1
		[]byte{
			0x2b, 0x8f, 0x55, 0x72, 0xf4, 0x93, 0xfb, 0xdd,
			0xc2, 0x92, 0x92, 0x6c, 0x2f, 0xce, 0xca, 0x29,
			0xdd, 0x09, 0xe8, 0xe4, 0xb7, 0x71, 0x47, 0x31,
			0x86, 0x86, 0x93, 0x96, 0x0d, 0x39, 0x35, 0xae,
			0x28, 0xf1, 0x61, 0xf6, 0x73, 0xf7, 0x1b, 0x2f,
			0x70, 0xf7, 0x7e, 0x6d, 0x91, 0x6e, 0xc6, 0x4a,
			0xeb, 0x6c, 0xb6, 0x3d, 0x1c, 0xc6, 0xa2, 0xca,
			0x13,
		},
		// for r2
		[]byte{
			0xa3, 0xfa, 0x04, 0xd8, 0x61, 0x3c, 0x4d, 0x16,
			0x00, 0xd0, 0x5c, 0x41, 0x51, 0xb8, 0x90, 0xe2,
			0x17, 0x19, 0xd2, 0x36, 0x69, 0x18, 0x78, 0x7b,
			0xb2, 0xd6, 0xd6, 0xe6, 0xe6, 0xac, 0x6f, 0x5e,
			0xb3, 0xb2, 0x12, 0xad, 0xa0, 0x47, 0xe1, 0x13,
			0x2a, 0x96, 0x4f, 0xda, 0x9a, 0x9e, 0x41, 0xe4,
			0x3f, 0xd9, 0x0d, 0x7d, 0xd5, 0x8a, 0xc0, 0xab,
			0x8b,
		},
		// for r3
		[]byte{
			0x69, 0x24, 0x84, 0x08, 0xf1, 0xf9, 0xa0, 0x6a,
			0x3f, 0x4f, 0x4e, 0x4a, 0x64, 0x3a, 0x99, 0x28,
			0xed, 0x9d, 0x00, 0x8e, 0xda, 0xf2, 0xa1, 0x68,
			0x93, 0x81, 0x0f, 0x68, 0x92, 0x13, 0x3b, 0x14,
			0x43, 0xc3, 0xf7, 0xf5, 0x96, 0x5b, 0x46, 0x1d,
			0x1c, 0xc5, 0x65, 0xa3, 0x09, 0x05, 0xbe, 0xd0,
			0xb4, 0xe8, 0x47, 0x87, 0x24, 0x7b, 0xd6, 0xce,
			0x07,
		},
		// for c1
		[]byte{
			0x5d, 0x99, 0x98, 0x56, 0x86, 0x17, 0x0f, 0xb9,
			0x4f, 0x85, 0x03, 0x7d, 0x5c, 0x31, 0x43, 0x64,
			0x95, 0x02, 0x73, 0xa3, 0xb1, 0xe8, 0x1d, 0xeb,
			0x0d, 0x0d, 0x74, 0x5b, 0x9c, 0x98, 0x75, 0xfd,
			0xb2, 0xde, 0x2b, 0x72, 0x8f, 0x80, 0x9e, 0xc8,
			0x49, 0x21, 0xa8, 0x18, 0x29, 0xaa, 0xa5, 0x71,
			0xda, 0x46, 0x30, 0x2d, 0x19, 0x97, 0x0d, 0xc4,
			0x7a,
		},
		// for c2
		[]byte{
			0xaa, 0x6d, 0x7a, 0xf6, 0xa0, 0x95, 0x4c, 0xb8,
			0x4c, 0x49, 0x08, 0x1b, 0xd9, 0x48, 0x2b, 0x24,
			0xf7, 0x22, 0x9f, 0x06, 0xaf, 0x33, 0xbb, 0xf2,
			0x08, 0x58, 0x6a, 0xe5, 0xb0, 0xb2, 0x29, 0x7e,
			0x3c, 0x5d, 0x6e, 0x67, 0x80, 0x2b, 0x06, 0x9f,
			0x94, 0x72, 0xbe, 0x5d, 0x53, 0xaa, 0xe6, 0xd3,
			0x39, 0x87, 0x12, 0x38, 0xf5, 0x18, 0x65, 0xd2,
			0x48,
		},
		// for c3
		[]byte{
			0x19, 0x69, 0x2f, 0xd7, 0x05, 0xd3, 0x0b, 0x1b,
			0x94, 0xaf, 0xa5, 0xba, 0xf6, 0x48, 0x2f, 0xb9,
			0x13, 0x04, 0xc1, 0xdd, 0xc7, 0xed, 0x81, 0x82,
			0x35, 0xfb, 0x67, 0xd7, 0x76, 0x37, 0x79, 0x08,
			0x75, 0x6f, 0xb2, 0x69, 0xcb, 0x1d, 0x55, 0xc8,
			0x3f, 0x32, 0x05, 0xc5, 0x27, 0xed, 0x7a, 0x97,
			0x11, 0x00, 0xe9, 0xff, 0xcc, 0x1d, 0xb1, 0xd2,
			0x0f,
		},
	)

	rsig, _ := generateSignature(wr, p1.priv, p1.pub, p1.pub, p2.pub, p3.pub, msg)

	c.Assert(rsig.c1.Encode(), DeepEquals, []byte{
		0x6b, 0x30, 0x64, 0xa7, 0x4d, 0x37, 0xb8, 0xf7,
		0xbf, 0xb2, 0x57, 0xf6, 0xb9, 0x46, 0x7c, 0x46,
		0x6b, 0x7e, 0xfc, 0x82, 0x2f, 0x42, 0x51, 0xea,
		0x27, 0xcf, 0x02, 0xe4, 0xbc, 0x25, 0xde, 0x67,
		0xe3, 0xe7, 0x52, 0x2a, 0x19, 0xe7, 0x80, 0x21,
		0xa3, 0x59, 0xcd, 0x6f, 0x6d, 0xa6, 0xf3, 0x99,
		0x17, 0x2a, 0xc6, 0x42, 0x43, 0x8d, 0x39, 0x0c,
	})
	c.Assert(rsig.r1.Encode(), DeepEquals, []byte{
		0x9d, 0x7c, 0xb1, 0x9b, 0xaa, 0x91, 0x62, 0xb4,
		0x2e, 0x01, 0x44, 0x49, 0x0f, 0xba, 0xc5, 0x50,
		0x5f, 0xe7, 0x3e, 0x06, 0xac, 0xce, 0xc2, 0x7b,
		0x22, 0x45, 0x32, 0xd3, 0x64, 0xe6, 0x52, 0x19,
		0xed, 0xb4, 0x24, 0x42, 0xe5, 0xcf, 0x60, 0x54,
		0xf9, 0x65, 0x88, 0x0e, 0x1e, 0x04, 0x2f, 0x25,
		0xd1, 0xf2, 0xa3, 0x5c, 0x9e, 0x41, 0x60, 0x3b,
	})
	c.Assert(rsig.c2.Encode(), DeepEquals, []byte{
		0x77, 0xab, 0x9a, 0x55, 0xd1, 0x74, 0x2d, 0x76,
		0x9b, 0x51, 0x13, 0x9d, 0xa6, 0x75, 0x85, 0x98,
		0x80, 0xac, 0x12, 0xca, 0x57, 0xae, 0x62, 0xdd,
		0xb7, 0x00, 0xac, 0x7a, 0xd4, 0xdd, 0x0b, 0x25,
		0xa9, 0x17, 0x5c, 0xab, 0x50, 0x3e, 0xfd, 0x39,
		0x23, 0x67, 0xd0, 0xc2, 0x41, 0x67, 0xea, 0x38,
		0x96, 0xf4, 0x91, 0x92, 0xc6, 0xf6, 0x6c, 0x26,
	})
	c.Assert(rsig.r2.Encode(), DeepEquals, []byte{
		0x14, 0x1f, 0x30, 0x68, 0x2e, 0xae, 0x7a, 0x17,
		0x25, 0xd8, 0xc5, 0x15, 0x6c, 0xc9, 0xaa, 0x79,
		0x7c, 0xef, 0x43, 0x7f, 0xf4, 0xdc, 0xc1, 0x02,
		0x8b, 0x31, 0x3c, 0x0f, 0xad, 0x3d, 0x2f, 0x2c,
		0x91, 0x9d, 0xee, 0x07, 0x5c, 0x45, 0x08, 0xa5,
		0x06, 0x51, 0x0c, 0x2d, 0x6b, 0xe6, 0xd2, 0x43,
		0x05, 0x4a, 0xc1, 0x17, 0xad, 0x14, 0xdd, 0x33,
	})
	c.Assert(rsig.c3.Encode(), DeepEquals, []byte{
		0x64, 0x8e, 0x4c, 0xc1, 0x91, 0xbd, 0x72, 0xc0,
		0x70, 0xd5, 0x82, 0xba, 0x00, 0x86, 0xa6, 0x39,
		0x8d, 0xc7, 0x95, 0x9a, 0xb3, 0x02, 0xf3, 0xfb,
		0xb0, 0x21, 0x8e, 0xc2, 0xd9, 0xd8, 0xeb, 0x5a,
		0x11, 0xd2, 0x8f, 0xb7, 0x33, 0x49, 0xe5, 0x05,
		0x54, 0xbb, 0xf9, 0x5b, 0xda, 0x19, 0x68, 0x97,
		0xb3, 0x77, 0x6c, 0xe5, 0xa8, 0x75, 0x15, 0x2c,
	})
	c.Assert(rsig.r3.Encode(), DeepEquals, []byte{
		0x53, 0x41, 0xf3, 0x67, 0xf3, 0xfa, 0xdd, 0x4b,
		0x76, 0x95, 0x6b, 0x8e, 0x8d, 0xaf, 0x34, 0x67,
		0x19, 0x33, 0xe4, 0x6d, 0x49, 0x93, 0x8d, 0xfb,
		0xeb, 0xbc, 0xb8, 0xea, 0x7d, 0x98, 0x56, 0x8a,
		0xb1, 0x0d, 0x90, 0xf3, 0x88, 0x6a, 0x40, 0x94,
		0x29, 0x9e, 0xbb, 0xaa, 0x8e, 0x2d, 0xca, 0x5a,
		0xe7, 0x46, 0xf1, 0x73, 0x62, 0xcf, 0x8b, 0x38,
	})
}

func (s *GenericServerSuite) Test_verify_canVerifyASignature(c *C) {
	msg := []byte("hi")
	p1 := deriveEDDSAKeypair([symKeyLength]byte{0x0A})
	p2 := deriveEDDSAKeypair([symKeyLength]byte{0x19})
	p3 := deriveEDDSAKeypair([symKeyLength]byte{0x2A})
	rsig, _ := generateSignature(defaultRandom(), p1.priv, p1.pub, p1.pub, p2.pub, p3.pub, msg)
	c.Assert(rsig.verify(p1.pub, p2.pub, p3.pub, msg), Equals, true)
}

func (s *GenericServerSuite) Test_verify_failsIfGivenAnotherKey(c *C) {
	msg := []byte("hi")
	p1 := deriveEDDSAKeypair([symKeyLength]byte{0x0A})
	p2 := deriveEDDSAKeypair([symKeyLength]byte{0x19})
	p3 := deriveEDDSAKeypair([symKeyLength]byte{0x2A})
	p4 := deriveEDDSAKeypair([symKeyLength]byte{0x2B})
	rsig, _ := generateSignature(defaultRandom(), p1.priv, p1.pub, p1.pub, p2.pub, p3.pub, msg)
	c.Assert(rsig.verify(p1.pub, p2.pub, p4.pub, msg), Equals, false)
	c.Assert(rsig.verify(p1.pub, p4.pub, p3.pub, msg), Equals, false)
	c.Assert(rsig.verify(p4.pub, p2.pub, p3.pub, msg), Equals, false)
}

func (s *GenericServerSuite) Test_verify_failsIfGivenTheWrongMessage(c *C) {
	msg := []byte("hi")
	msg2 := []byte("hi2")
	p1 := deriveEDDSAKeypair([symKeyLength]byte{0x0A})
	p2 := deriveEDDSAKeypair([symKeyLength]byte{0x19})
	p3 := deriveEDDSAKeypair([symKeyLength]byte{0x2A})
	rsig, _ := generateSignature(defaultRandom(), p1.priv, p1.pub, p1.pub, p2.pub, p3.pub, msg)
	c.Assert(rsig.verify(p1.pub, p2.pub, p3.pub, msg2), Equals, false)
}

func (s *GenericServerSuite) Test_verify_failsIfTheRsigIsModified(c *C) {
	msg := []byte("hi")
	p1 := deriveEDDSAKeypair([symKeyLength]byte{0x0A})
	p2 := deriveEDDSAKeypair([symKeyLength]byte{0x19})
	p3 := deriveEDDSAKeypair([symKeyLength]byte{0x2A})
	rsig, _ := generateSignature(defaultRandom(), p1.priv, p1.pub, p1.pub, p2.pub, p3.pub, msg)

	org := rsig.c1.Copy()
	rsig.c1.Halve(rsig.c1)
	c.Assert(rsig.verify(p1.pub, p2.pub, p3.pub, msg), Equals, false)
	rsig.c1 = org

	org = rsig.c2.Copy()
	rsig.c2.Halve(rsig.c2)
	c.Assert(rsig.verify(p1.pub, p2.pub, p3.pub, msg), Equals, false)
	rsig.c2 = org

	org = rsig.c3.Copy()
	rsig.c3.Halve(rsig.c3)
	c.Assert(rsig.verify(p1.pub, p2.pub, p3.pub, msg), Equals, false)
	rsig.c3 = org

	org = rsig.r1.Copy()
	rsig.r1.Halve(rsig.r1)
	c.Assert(rsig.verify(p1.pub, p2.pub, p3.pub, msg), Equals, false)
	rsig.r1 = org

	org = rsig.r2.Copy()
	rsig.r2.Halve(rsig.r2)
	c.Assert(rsig.verify(p1.pub, p2.pub, p3.pub, msg), Equals, false)
	rsig.r2 = org

	org = rsig.r3.Copy()
	rsig.r3.Halve(rsig.r3)
	c.Assert(rsig.verify(p1.pub, p2.pub, p3.pub, msg), Equals, false)
	rsig.r3 = org
}

func (s *GenericServerSuite) Test_ringSignature_deserialize_shouldFailOnMissing_c1(c *C) {
	m := &ringSignature{}
	_, ok := m.deserialize([]byte{
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ringSignature_deserialize_shouldFailOnMissing_r1(c *C) {
	m := &ringSignature{}
	_, ok := m.deserialize([]byte{
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ringSignature_deserialize_shouldFailOnMissing_c2(c *C) {
	m := &ringSignature{}
	_, ok := m.deserialize([]byte{
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ringSignature_deserialize_shouldFailOnMissing_r2(c *C) {
	m := &ringSignature{}
	_, ok := m.deserialize([]byte{
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ringSignature_deserialize_shouldFailOnMissing_c3(c *C) {
	m := &ringSignature{}
	_, ok := m.deserialize([]byte{
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ringSignature_deserialize_shouldFailOnMissing_r3(c *C) {
	m := &ringSignature{}
	_, ok := m.deserialize([]byte{
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,

		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	})

	c.Assert(ok, Equals, false)
}
