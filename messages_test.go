package prekeyserver

import (
	"errors"
	"time"

	. "gopkg.in/check.v1"
)

func (s *GenericServerSuite) Test_parseMessage_returnsAnErrorForTooShortMessages(c *C) {
	_, e := parseMessage([]byte{})
	c.Assert(e, Not(IsNil))
	c.Assert(e, DeepEquals, errors.New("message too short to be a valid message"))

	_, e = parseMessage([]byte{0x01, 0x02})
	c.Assert(e, Not(IsNil))
	c.Assert(e, DeepEquals, errors.New("message too short to be a valid message"))
}

func (s *GenericServerSuite) Test_parseMessage_returnsAnErrorForUnknownMessageType(c *C) {
	_, e := parseMessage([]byte{0x00, 0x04, 0x42})
	c.Assert(e, Not(IsNil))
	c.Assert(e, DeepEquals, errors.New("unknown message type: 0x42"))
}

func (s *GenericServerSuite) Test_parseMessage_returnsAnErrorForInvalidVersion(c *C) {
	_, e := parseMessage([]byte{0x00, 0x00, 0x01})
	c.Assert(e, Not(IsNil))
	c.Assert(e, DeepEquals, errors.New("invalid protocol version"))

	_, e = parseMessage([]byte{0x00, 0x01, 0x01})
	c.Assert(e, Not(IsNil))
	c.Assert(e, DeepEquals, errors.New("invalid protocol version"))

	_, e = parseMessage([]byte{0x00, 0x02, 0x01})
	c.Assert(e, Not(IsNil))
	c.Assert(e, DeepEquals, errors.New("invalid protocol version"))

	_, e = parseMessage([]byte{0x00, 0x03, 0x01})
	c.Assert(e, Not(IsNil))
	c.Assert(e, DeepEquals, errors.New("invalid protocol version"))

	_, e = parseMessage([]byte{0x00, 0x05, 0x01})
	c.Assert(e, Not(IsNil))
	c.Assert(e, DeepEquals, errors.New("invalid protocol version"))

	_, e = parseMessage([]byte{0x24, 0x05, 0x01})
	c.Assert(e, Not(IsNil))
	c.Assert(e, DeepEquals, errors.New("invalid protocol version"))
}

func (s *GenericServerSuite) Test_noPrekeyEnsemblesMessage_shouldSerializeCorrectly(c *C) {
	m := &noPrekeyEnsemblesMessage{}
	m.instanceTag = 0x4253112D
	m.message = "no prekeys, sorry very sorry"
	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x11,

		// instance tag
		0x42, 0x53, 0x11, 0x2D,

		// message
		0x00, 0x00, 0x00, 0x1C, 0x6E, 0x6F, 0x20, 0x70,
		0x72, 0x65, 0x6B, 0x65, 0x79, 0x73, 0x2C, 0x20,
		0x73, 0x6F, 0x72, 0x72, 0x79, 0x20, 0x76, 0x65,
		0x72, 0x79, 0x20, 0x73, 0x6F, 0x72, 0x72, 0x79,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_noPrekeyEnsemblesMessage_shouldDeserializeCorrectly(c *C) {
	m := &noPrekeyEnsemblesMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x11,

		// instance tag
		0x42, 0x53, 0x11, 0x2D,

		// message
		0x00, 0x00, 0x00, 0x1C, 0x6E, 0x6F, 0x20, 0x70,
		0x72, 0x65, 0x6B, 0x65, 0x79, 0x73, 0x2C, 0x20,
		0x73, 0x6F, 0x72, 0x72, 0x79, 0x20, 0x76, 0x65,
		0x72, 0x79, 0x20, 0x73, 0x6F, 0x72, 0x72, 0x79,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.instanceTag, Equals, uint32(0x4253112D))
	c.Assert(m.message, DeepEquals, "no prekeys, sorry very sorry")
}

func (s *GenericServerSuite) Test_ensembleRetrievalQueryMessage_shouldSerializeCorrectly(c *C) {
	m := &ensembleRetrievalQueryMessage{}
	m.instanceTag = 0x4253112E
	m.identity = "foobar@blarg.com/foo"
	m.versions = []byte{0x05, 0x42}
	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x09,

		// instance tag
		0x42, 0x53, 0x11, 0x2E,

		// identity
		0x00, 0x00, 0x00, 0x14, 0x66, 0x6f, 0x6f, 0x62,
		0x61, 0x72, 0x40, 0x62, 0x6c, 0x61, 0x72, 0x67,
		0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6f, 0x6f,

		// versions
		0x00, 0x00, 0x00, 0x02,
		0x05, 0x42,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_ensembleRetrievalQueryMessage_shouldDeserializeCorrectly(c *C) {
	m := &ensembleRetrievalQueryMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x09,

		// instance tag
		0x42, 0x53, 0x11, 0x2E,

		// identity
		0x00, 0x00, 0x00, 0x14, 0x66, 0x6f, 0x6f, 0x62,
		0x61, 0x72, 0x40, 0x62, 0x6c, 0x61, 0x72, 0x67,
		0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6f, 0x6f,

		// versions
		0x00, 0x00, 0x00, 0x02,
		0x05, 0x42,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.instanceTag, Equals, uint32(0x4253112E))
	c.Assert(m.identity, DeepEquals, "foobar@blarg.com/foo")
	c.Assert(m.versions, DeepEquals, []byte{0x05, 0x42})
}

func (s *GenericServerSuite) Test_successMessage_shouldSerializeCorrectly(c *C) {
	m := &successMessage{}
	m.instanceTag = 0x4254112E
	m.mac = [macLength]byte{
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	}
	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x07,

		// instance tag
		0x42, 0x54, 0x11, 0x2E,

		// MAC
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_successMessage_shouldDeserializeCorrectly(c *C) {
	m := &successMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x07,

		// instance tag
		0x42, 0x54, 0x11, 0x2E,

		// MAC
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.instanceTag, Equals, uint32(0x4254112E))
	c.Assert(m.mac[:], DeepEquals, []byte{
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
}

func (s *GenericServerSuite) Test_failureMessage_shouldSerializeCorrectly(c *C) {
	m := &failureMessage{}
	m.instanceTag = 0x4264112E
	m.mac = [macLength]byte{
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	}
	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// instance tag
		0x42, 0x64, 0x11, 0x2E,

		// MAC
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_failureMessage_shouldDeserializeCorrectly(c *C) {
	m := &failureMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// instance tag
		0x42, 0x74, 0x11, 0x2E,

		// MAC
		0x01, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.instanceTag, Equals, uint32(0x4274112E))
	c.Assert(m.mac[:], DeepEquals, []byte{
		0x01, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
}

func (s *GenericServerSuite) Test_storageInformationRequestMessage_shouldSerializeCorrectly(c *C) {
	m := &storageInformationRequestMessage{}
	m.mac = [macLength]byte{
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x08, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	}
	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x05,

		// MAC
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x08, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_storageInformationRequestMessage_shouldDeserializeCorrectly(c *C) {
	m := &storageInformationRequestMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x05,

		// MAC
		0x01, 0x03, 0x03, 0x04, 0x05, 0x09, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.mac[:], DeepEquals, []byte{
		0x01, 0x03, 0x03, 0x04, 0x05, 0x09, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
}

func (s *GenericServerSuite) Test_storageStatusMessage_shouldSerializeCorrectly(c *C) {
	m := &storageStatusMessage{}
	m.instanceTag = 0x4264212E
	m.number = 0x1234ABC0
	m.mac = [macLength]byte{
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	}
	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x06,

		// instance tag
		0x42, 0x64, 0x21, 0x2E,

		// number
		0x12, 0x34, 0xAB, 0xC0,

		// MAC
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_storageStatusMessage_shouldDeserializeCorrectly(c *C) {
	m := &storageStatusMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x06,

		// instance tag
		0x42, 0x74, 0x23, 0x2E,

		// number
		0x13, 0x34, 0xAB, 0xC0,

		// MAC
		0x01, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.instanceTag, Equals, uint32(0x4274232E))
	c.Assert(m.number, Equals, uint32(0x1334ABC0))
	c.Assert(m.mac[:], DeepEquals, []byte{
		0x01, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00,
	})
}

func (s *GenericServerSuite) Test_publicationMessage_shouldSerializeCorrectly_withJustPrekeyMessages(c *C) {
	m := &publicationMessage{}
	m.clientProfile = nil
	m.prekeyProfiles = []*prekeyProfile{}

	pm1 := &prekeyMessage{}
	pm1.identifier = 0x4264212E
	pm1.instanceTag = 0x1234ABC0
	pm1.y = generateECDHPublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF})
	pm1.b = []byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F}

	pm2 := &prekeyMessage{}
	pm2.identifier = 0x4264212F
	pm2.instanceTag = 0x1234ABC0
	pm2.y = generateECDHPublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF})
	pm2.b = []byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x1C}

	m.prekeyMessages = []*prekeyMessage{
		pm1,
		pm2,
	}

	m.mac = [macLength]byte{
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	}

	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x04,

		// N
		0x02,

		// Prekey messages
		// prekey message 1
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x62, 0x38, 0x7d, 0xcd, 0x13, 0x84, 0x21, 0x0e,
		0x62, 0xcf, 0xaf, 0x06, 0x7f, 0x49, 0x02, 0x8c,
		0xdd, 0xfe, 0x99, 0xb9, 0x01, 0x59, 0x66, 0x7d,
		0x57, 0x0d, 0xc0, 0xb7, 0x89, 0x2c, 0xfc, 0x5c,
		0xac, 0xb8, 0x24, 0x17, 0xe9, 0x4d, 0x36, 0x29,
		0x04, 0x0e, 0x6a, 0xd1, 0xb4, 0x2d, 0x1a, 0x55,
		0xb9, 0x24, 0x29, 0x23, 0x7e, 0x5b, 0xc9, 0xe6,
		0x00,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,

		// prekey message 2
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x62, 0x38, 0x7d, 0xcd, 0x13, 0x84, 0x21, 0x0e,
		0x62, 0xcf, 0xaf, 0x06, 0x7f, 0x49, 0x02, 0x8c,
		0xdd, 0xfe, 0x99, 0xb9, 0x01, 0x59, 0x66, 0x7d,
		0x57, 0x0d, 0xc0, 0xb7, 0x89, 0x2c, 0xfc, 0x5c,
		0xac, 0xb8, 0x24, 0x17, 0xe9, 0x4d, 0x36, 0x29,
		0x04, 0x0e, 0x6a, 0xd1, 0xb4, 0x2d, 0x1a, 0x55,
		0xb9, 0x24, 0x29, 0x23, 0x7e, 0x5b, 0xc9, 0xe6,
		0x00,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x1C,

		// K
		0x00,

		// J
		0x00,

		// mac
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_publicationMessage_shouldSerializeCorrectly_withAllThreeTypes(c *C) {
	m := &publicationMessage{}

	cp := &clientProfile{}
	cp.identifier = 0xABCDEF11
	cp.instanceTag = 0x4253112A
	cp.publicKey = generateEDDSAPublicKeyFrom([symKeyLength]byte{0xAB, 0x42})
	cp.versions = []byte{0x04}
	cp.expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	cp.dsaKey = nil
	cp.transitionalSignature = nil
	cp.sig = &eddsaSignature{
		s: [114]byte{0x15, 0x00, 0x00, 0x00, 0x12},
	}
	m.clientProfile = cp

	pp := &prekeyProfile{}
	pp.identifier = 0x4264212F
	pp.instanceTag = 0x1234ABC1
	pp.expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	pp.sharedPrekey = generateECDHPublicKeyFrom([symKeyLength]byte{0x44, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF})
	pp.sig = &eddsaSignature{
		s: [114]byte{0x16, 0x00, 0x00, 0x00, 0x12, 0x11},
	}
	m.prekeyProfiles = []*prekeyProfile{pp}

	pm1 := &prekeyMessage{}
	pm1.identifier = 0x4264212E
	pm1.instanceTag = 0x1234ABC0
	pm1.y = generateECDHPublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF})
	pm1.b = []byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F}

	m.prekeyMessages = []*prekeyMessage{
		pm1,
	}

	m.mac = [macLength]byte{
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	}

	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x04,

		// N
		0x01,

		// Prekey messages
		// prekey message 1
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x62, 0x38, 0x7d, 0xcd, 0x13, 0x84, 0x21, 0x0e,
		0x62, 0xcf, 0xaf, 0x06, 0x7f, 0x49, 0x02, 0x8c,
		0xdd, 0xfe, 0x99, 0xb9, 0x01, 0x59, 0x66, 0x7d,
		0x57, 0x0d, 0xc0, 0xb7, 0x89, 0x2c, 0xfc, 0x5c,
		0xac, 0xb8, 0x24, 0x17, 0xe9, 0x4d, 0x36, 0x29,
		0x04, 0x0e, 0x6a, 0xd1, 0xb4, 0x2d, 0x1a, 0x55,
		0xb9, 0x24, 0x29, 0x23, 0x7e, 0x5b, 0xc9, 0xe6,
		0x00,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,

		// K
		0x01,

		0x0, 0x0, 0x0, 0x5,

		// identifier
		0x0, 0x1, 0xab, 0xcd, 0xef, 0x11,

		// instance tag
		0x0, 0x2, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x03, 0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// J
		0x01,

		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x82, 0xd7, 0xaf, 0x02, 0xa2, 0x05, 0xb6, 0x06,
		0x15, 0x2b, 0x9a, 0x83, 0x4e, 0x10, 0x33, 0xcc,
		0x64, 0x10, 0xaf, 0xce, 0x92, 0xa4, 0x35, 0x4f,
		0xc4, 0x67, 0x70, 0xc1, 0x5b, 0xec, 0x01, 0x5b,
		0xc4, 0x2e, 0xf9, 0x5a, 0x53, 0x06, 0x05, 0x50,
		0x51, 0x2a, 0x0a, 0xf2, 0xb5, 0x06, 0x4e, 0xac,
		0x88, 0x88, 0x69, 0x4f, 0xeb, 0x10, 0xef, 0x02,
		0x00,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// mac
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_publicationMessage_shouldDeserializeCorrectly_withJustPrekeyMessages(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x04,

		// N
		0x02,

		// Prekey messages
		// prekey message 1
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x62, 0x38, 0x7d, 0xcd, 0x13, 0x84, 0x21, 0x0e,
		0x62, 0xcf, 0xaf, 0x06, 0x7f, 0x49, 0x02, 0x8c,
		0xdd, 0xfe, 0x99, 0xb9, 0x01, 0x59, 0x66, 0x7d,
		0x57, 0x0d, 0xc0, 0xb7, 0x89, 0x2c, 0xfc, 0x5c,
		0xac, 0xb8, 0x24, 0x17, 0xe9, 0x4d, 0x36, 0x29,
		0x04, 0x0e, 0x6a, 0xd1, 0xb4, 0x2d, 0x1a, 0x55,
		0xb9, 0x24, 0x29, 0x23, 0x7e, 0x5b, 0xc9, 0xe6,
		0x00,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,

		// prekey message 2
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x62, 0x38, 0x7d, 0xcd, 0x13, 0x84, 0x21, 0x0e,
		0x62, 0xcf, 0xaf, 0x06, 0x7f, 0x49, 0x02, 0x8c,
		0xdd, 0xfe, 0x99, 0xb9, 0x01, 0x59, 0x66, 0x7d,
		0x57, 0x0d, 0xc0, 0xb7, 0x89, 0x2c, 0xfc, 0x5c,
		0xac, 0xb8, 0x24, 0x17, 0xe9, 0x4d, 0x36, 0x29,
		0x04, 0x0e, 0x6a, 0xd1, 0xb4, 0x2d, 0x1a, 0x55,
		0xb9, 0x24, 0x29, 0x23, 0x7e, 0x5b, 0xc9, 0xe6,
		0x00,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x1C,

		// K
		0x00,

		// J
		0x00,

		// mac
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	})
	c.Assert(ok, Equals, true)

	c.Assert(m.clientProfile, IsNil)

	c.Assert(len(m.prekeyProfiles), Equals, 0)

	c.Assert(len(m.prekeyMessages), Equals, 2)
	c.Assert(m.prekeyMessages[0].identifier, Equals, uint32(0x4264212E))
	c.Assert(m.prekeyMessages[0].instanceTag, Equals, uint32(0x1234ABC0))
	c.Assert(m.prekeyMessages[0].y.k.Equals(generateECDHPublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).k), Equals, true)
	c.Assert(m.prekeyMessages[0].b, DeepEquals, []byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F})

	c.Assert(m.prekeyMessages[1].identifier, Equals, uint32(0x4264212F))
	c.Assert(m.prekeyMessages[1].instanceTag, Equals, uint32(0x1234ABC0))
	c.Assert(m.prekeyMessages[1].y.k.Equals(generateECDHPublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).k), Equals, true)
	c.Assert(m.prekeyMessages[1].b, DeepEquals, []byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x1C})

	c.Assert(m.mac[:], DeepEquals, []byte{
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	})
}

func (s *GenericServerSuite) Test_publicationMessage_shouldDeserializeCorrectly_withClientProfilesAndPrekeyProfilesAndMessages(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x04,

		// N
		0x01,

		// Prekey messages
		// prekey message 1
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x62, 0x38, 0x7d, 0xcd, 0x13, 0x84, 0x21, 0x0e,
		0x62, 0xcf, 0xaf, 0x06, 0x7f, 0x49, 0x02, 0x8c,
		0xdd, 0xfe, 0x99, 0xb9, 0x01, 0x59, 0x66, 0x7d,
		0x57, 0x0d, 0xc0, 0xb7, 0x89, 0x2c, 0xfc, 0x5c,
		0xac, 0xb8, 0x24, 0x17, 0xe9, 0x4d, 0x36, 0x29,
		0x04, 0x0e, 0x6a, 0xd1, 0xb4, 0x2d, 0x1a, 0x55,
		0xb9, 0x24, 0x29, 0x23, 0x7e, 0x5b, 0xc9, 0xe6,
		0x00,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,

		// K
		0x01,

		0x0, 0x0, 0x0, 0x5,

		// identifier
		0x0, 0x1, 0xab, 0xcd, 0xef, 0x11,

		// instance tag
		0x0, 0x2, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x03, 0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// J
		0x01,

		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x82, 0xd7, 0xaf, 0x02, 0xa2, 0x05, 0xb6, 0x06,
		0x15, 0x2b, 0x9a, 0x83, 0x4e, 0x10, 0x33, 0xcc,
		0x64, 0x10, 0xaf, 0xce, 0x92, 0xa4, 0x35, 0x4f,
		0xc4, 0x67, 0x70, 0xc1, 0x5b, 0xec, 0x01, 0x5b,
		0xc4, 0x2e, 0xf9, 0x5a, 0x53, 0x06, 0x05, 0x50,
		0x51, 0x2a, 0x0a, 0xf2, 0xb5, 0x06, 0x4e, 0xac,
		0x88, 0x88, 0x69, 0x4f, 0xeb, 0x10, 0xef, 0x02,
		0x00,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// mac
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	})
	c.Assert(ok, Equals, true)

	c.Assert(m.clientProfile, Not(IsNil))
	c.Assert(m.clientProfile.identifier, Equals, uint32(0xABCDEF11))
	c.Assert(m.clientProfile.instanceTag, Equals, uint32(0x4253112A))
	c.Assert(m.clientProfile.publicKey.k.Equals(generateEDDSAPublicKeyFrom([symKeyLength]byte{0xAB, 0x42}).k), Equals, true)
	c.Assert(m.clientProfile.versions, DeepEquals, []byte{0x04})
	c.Assert(m.clientProfile.expiration, Equals, time.Date(2034, 11, 5, 13, 46, 00, 00, time.UTC))
	c.Assert(m.clientProfile.dsaKey, IsNil)
	c.Assert(m.clientProfile.transitionalSignature, IsNil)
	c.Assert(m.clientProfile.sig, DeepEquals, &eddsaSignature{
		s: [114]byte{0x15, 0x00, 0x00, 0x00, 0x12},
	})

	c.Assert(len(m.prekeyProfiles), Equals, 1)
	c.Assert(m.prekeyProfiles[0].identifier, Equals, uint32(0x4264212F))
	c.Assert(m.prekeyProfiles[0].instanceTag, Equals, uint32(0x1234ABC1))
	c.Assert(m.prekeyProfiles[0].expiration, DeepEquals, time.Date(2034, 11, 5, 13, 46, 00, 00, time.UTC))
	c.Assert(m.prekeyProfiles[0].sharedPrekey.k.Equals(generateECDHPublicKeyFrom([symKeyLength]byte{0x44, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).k), Equals, true)
	c.Assert(m.prekeyProfiles[0].sig, DeepEquals, &eddsaSignature{
		s: [114]byte{0x16, 0x00, 0x00, 0x00, 0x12, 0x11},
	})

	c.Assert(len(m.prekeyMessages), Equals, 1)
	c.Assert(m.prekeyMessages[0].identifier, Equals, uint32(0x4264212E))
	c.Assert(m.prekeyMessages[0].instanceTag, Equals, uint32(0x1234ABC0))
	c.Assert(m.prekeyMessages[0].y.k.Equals(generateECDHPublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).k), Equals, true)
	c.Assert(m.prekeyMessages[0].b, DeepEquals, []byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F})

	c.Assert(m.mac[:], DeepEquals, []byte{
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	})
}

func (s *GenericServerSuite) Test_ensembleRetrievalMessage_shouldSerializeCorrectly(c *C) {
	m := &ensembleRetrievalMessage{}
	m.instanceTag = 0x1234AABB

	pe := &prekeyEnsemble{}

	pe.cp = &clientProfile{}
	pe.cp.identifier = 0xABCDEF11
	pe.cp.instanceTag = 0x4253112A
	pe.cp.publicKey = generateEDDSAPublicKeyFrom([symKeyLength]byte{0xAB, 0x42})
	pe.cp.versions = []byte{0x04}
	pe.cp.expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	pe.cp.dsaKey = nil
	pe.cp.transitionalSignature = nil
	pe.cp.sig = &eddsaSignature{
		s: [114]byte{0x15, 0x00, 0x00, 0x00, 0x12},
	}

	pe.pp = &prekeyProfile{}
	pe.pp.identifier = 0x4264212F
	pe.pp.instanceTag = 0x1234ABC1
	pe.pp.expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	pe.pp.sharedPrekey = generateECDHPublicKeyFrom([symKeyLength]byte{0x44, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF})
	pe.pp.sig = &eddsaSignature{
		s: [114]byte{0x16, 0x00, 0x00, 0x00, 0x12, 0x11},
	}

	pe.pm = &prekeyMessage{}
	pe.pm.identifier = 0x4264212E
	pe.pm.instanceTag = 0x1234ABC0
	pe.pm.y = generateECDHPublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF})
	pe.pm.b = []byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F}

	m.ensembles = []*prekeyEnsemble{
		pe,
	}

	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x10,

		// instance tag
		0x12, 0x34, 0xAA, 0xBB,

		// L
		0x01,

		// client profile
		0x0, 0x0, 0x0, 0x5,

		// identifier
		0x0, 0x1, 0xab, 0xcd, 0xef, 0x11,

		// instance tag
		0x0, 0x2, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x03, 0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// prekey profile
		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x82, 0xd7, 0xaf, 0x02, 0xa2, 0x05, 0xb6, 0x06,
		0x15, 0x2b, 0x9a, 0x83, 0x4e, 0x10, 0x33, 0xcc,
		0x64, 0x10, 0xaf, 0xce, 0x92, 0xa4, 0x35, 0x4f,
		0xc4, 0x67, 0x70, 0xc1, 0x5b, 0xec, 0x01, 0x5b,
		0xc4, 0x2e, 0xf9, 0x5a, 0x53, 0x06, 0x05, 0x50,
		0x51, 0x2a, 0x0a, 0xf2, 0xb5, 0x06, 0x4e, 0xac,
		0x88, 0x88, 0x69, 0x4f, 0xeb, 0x10, 0xef, 0x02,
		0x00,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// Prekey message
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x62, 0x38, 0x7d, 0xcd, 0x13, 0x84, 0x21, 0x0e,
		0x62, 0xcf, 0xaf, 0x06, 0x7f, 0x49, 0x02, 0x8c,
		0xdd, 0xfe, 0x99, 0xb9, 0x01, 0x59, 0x66, 0x7d,
		0x57, 0x0d, 0xc0, 0xb7, 0x89, 0x2c, 0xfc, 0x5c,
		0xac, 0xb8, 0x24, 0x17, 0xe9, 0x4d, 0x36, 0x29,
		0x04, 0x0e, 0x6a, 0xd1, 0xb4, 0x2d, 0x1a, 0x55,
		0xb9, 0x24, 0x29, 0x23, 0x7e, 0x5b, 0xc9, 0xe6,
		0x00,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_ensembleRetrievalMessage_shouldDeserializeCorrectly(c *C) {
	m := &ensembleRetrievalMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x10,

		// instance tag
		0x12, 0x34, 0xAA, 0xBB,

		// L
		0x01,

		// client profile
		0x0, 0x0, 0x0, 0x5,

		// identifier
		0x0, 0x1, 0xab, 0xcd, 0xef, 0x11,

		// instance tag
		0x0, 0x2, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x03, 0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// prekey profile
		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x82, 0xd7, 0xaf, 0x02, 0xa2, 0x05, 0xb6, 0x06,
		0x15, 0x2b, 0x9a, 0x83, 0x4e, 0x10, 0x33, 0xcc,
		0x64, 0x10, 0xaf, 0xce, 0x92, 0xa4, 0x35, 0x4f,
		0xc4, 0x67, 0x70, 0xc1, 0x5b, 0xec, 0x01, 0x5b,
		0xc4, 0x2e, 0xf9, 0x5a, 0x53, 0x06, 0x05, 0x50,
		0x51, 0x2a, 0x0a, 0xf2, 0xb5, 0x06, 0x4e, 0xac,
		0x88, 0x88, 0x69, 0x4f, 0xeb, 0x10, 0xef, 0x02,
		0x00,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// Prekey message
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x62, 0x38, 0x7d, 0xcd, 0x13, 0x84, 0x21, 0x0e,
		0x62, 0xcf, 0xaf, 0x06, 0x7f, 0x49, 0x02, 0x8c,
		0xdd, 0xfe, 0x99, 0xb9, 0x01, 0x59, 0x66, 0x7d,
		0x57, 0x0d, 0xc0, 0xb7, 0x89, 0x2c, 0xfc, 0x5c,
		0xac, 0xb8, 0x24, 0x17, 0xe9, 0x4d, 0x36, 0x29,
		0x04, 0x0e, 0x6a, 0xd1, 0xb4, 0x2d, 0x1a, 0x55,
		0xb9, 0x24, 0x29, 0x23, 0x7e, 0x5b, 0xc9, 0xe6,
		0x00,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	})

	c.Assert(ok, Equals, true)

	c.Assert(len(m.ensembles), Equals, 1)
	c.Assert(m.ensembles[0].cp, Not(IsNil))
	c.Assert(m.ensembles[0].cp.identifier, Equals, uint32(0xABCDEF11))
	c.Assert(m.ensembles[0].cp.instanceTag, Equals, uint32(0x4253112A))
	c.Assert(m.ensembles[0].cp.publicKey.k.Equals(generateEDDSAPublicKeyFrom([symKeyLength]byte{0xAB, 0x42}).k), Equals, true)
	c.Assert(m.ensembles[0].cp.versions, DeepEquals, []byte{0x04})
	c.Assert(m.ensembles[0].cp.expiration, Equals, time.Date(2034, 11, 5, 13, 46, 00, 00, time.UTC))
	c.Assert(m.ensembles[0].cp.dsaKey, IsNil)
	c.Assert(m.ensembles[0].cp.transitionalSignature, IsNil)
	c.Assert(m.ensembles[0].cp.sig, DeepEquals, &eddsaSignature{
		s: [114]byte{0x15, 0x00, 0x00, 0x00, 0x12},
	})

	c.Assert(m.ensembles[0].pp.identifier, Equals, uint32(0x4264212F))
	c.Assert(m.ensembles[0].pp.instanceTag, Equals, uint32(0x1234ABC1))
	c.Assert(m.ensembles[0].pp.expiration, DeepEquals, time.Date(2034, 11, 5, 13, 46, 00, 00, time.UTC))
	c.Assert(m.ensembles[0].pp.sharedPrekey.k.Equals(generateECDHPublicKeyFrom([symKeyLength]byte{0x44, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).k), Equals, true)
	c.Assert(m.ensembles[0].pp.sig, DeepEquals, &eddsaSignature{
		s: [114]byte{0x16, 0x00, 0x00, 0x00, 0x12, 0x11},
	})

	c.Assert(m.ensembles[0].pm.identifier, Equals, uint32(0x4264212E))
	c.Assert(m.ensembles[0].pm.instanceTag, Equals, uint32(0x1234ABC0))
	c.Assert(m.ensembles[0].pm.y.k.Equals(generateECDHPublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).k), Equals, true)
	c.Assert(m.ensembles[0].pm.b, DeepEquals, []byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F})
}
